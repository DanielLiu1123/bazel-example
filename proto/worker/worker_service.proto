syntax = "proto3";

package worker;

import "proto/worker/worker.proto";
import "proto/common/errors.proto";
import "proto/common/pagination.proto";

option java_package = "com.example.worker";
option java_outer_classname = "WorkerServiceProto";
option go_package = "github.com/example/bazel-example/proto/worker";

// Worker service definition
service WorkerService {
  // Create a new job
  rpc CreateJob(CreateJobRequest) returns (CreateJobResponse);
  
  // Get job by ID
  rpc GetJob(GetJobRequest) returns (GetJobResponse);
  
  // List jobs with filters
  rpc ListJobs(ListJobsRequest) returns (ListJobsResponse);
  
  // Cancel a job
  rpc CancelJob(CancelJobRequest) returns (CancelJobResponse);
  
  // Retry a failed job
  rpc RetryJob(RetryJobRequest) returns (RetryJobResponse);
  
  // Get worker statistics
  rpc GetWorkerStats(GetWorkerStatsRequest) returns (GetWorkerStatsResponse);
  
  // Health check for worker
  rpc WorkerHealthCheck(WorkerHealthCheckRequest) returns (WorkerHealthCheckResponse);
}

// Request/Response messages
message CreateJobResponse {
  Job job = 1;
  common.Error error = 2;
}

message GetJobRequest {
  string id = 1;
}

message GetJobResponse {
  Job job = 1;
  common.Error error = 2;
}

message ListJobsRequest {
  common.PageRequest page_request = 1;
  JobType type_filter = 2;
  JobStatus status_filter = 3;
  JobPriority priority_filter = 4;
}

message ListJobsResponse {
  repeated Job jobs = 1;
  common.PageResponse page_response = 2;
  common.Error error = 3;
}

message CancelJobRequest {
  string id = 1;
}

message CancelJobResponse {
  bool success = 1;
  common.Error error = 2;
}

message RetryJobRequest {
  string id = 1;
}

message RetryJobResponse {
  Job job = 1;
  common.Error error = 2;
}

message GetWorkerStatsRequest {
}

message GetWorkerStatsResponse {
  int32 total_jobs = 1;
  int32 pending_jobs = 2;
  int32 running_jobs = 3;
  int32 completed_jobs = 4;
  int32 failed_jobs = 5;
  int32 active_workers = 6;
  common.Error error = 7;
}

message WorkerHealthCheckRequest {
}

message WorkerHealthCheckResponse {
  string status = 1;
  int32 active_workers = 2;
  int32 queue_size = 3;
  common.Timestamp timestamp = 4;
}
